#!/usr/bin/env python
#
# Copyright (c) 2007, Hans Meine <hans_meine@gmx.net>
#  All rights reserved.
#
# This is licensed according to the new BSD license.
# Please send patches / comments, I would be happy about any feedback.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the University of Hamburg nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys, os.path, subprocess, glob, time, optparse, tempfile

op = optparse.OptionParser(usage="%prog [options] foo.tikz")
op.add_option("-v", "--verbose", action = "store_true", default = False,
			  dest = "verbose", help = "verbose output")
op.add_option("-o", "--once", action = "store_true",
			  dest = "once", default = False,
			  help = "only convert once, then clean up temporary files and quit")
op.add_option("-s", "--view", action = "store_true",
			  dest = "view", default = False,
			  help = "start viewer after first successful compilation")

options, args = op.parse_args()
tikzName, = args # exactly one filename expected

basename = "tikz2pdf_temp"
texName = basename + ".tex"
pdfName = basename + ".pdf"

templateFilename = os.path.expanduser("~/.tikz2pdf.tex")
searchDir = os.getcwd()
while searchDir != "/":
	candidate = os.path.join(searchDir, ".tikz2pdf.tex")
	if os.path.exists(candidate):
		templateFilename = candidate
		sys.stdout.write("Using template %r.\n" % candidate)
		break
	searchDir = os.path.split(searchDir)[0]

# re-use texdoc's configuration variables for viewing TeX's output:
viewCommand = "evince %r"
texdocViewCommand = os.environ.get("TEXDOCVIEW_pdf", None)
if texdocViewCommand:
	viewCommand = texdocViewCommand.rstrip("&").replace("%s", "%r")

if os.path.exists(templateFilename):
	template = file(templateFilename).read()
else:
	template = r"""\documentclass{article}

\usepackage{tikz,nicefrac,amsmath,pifont}
\usetikzlibrary{arrows,snakes,backgrounds,patterns,matrix,shapes,fit,calc,shadows,plotmarks}

\usepackage[graphics,tightpage,active]{preview}
\PreviewEnvironment{tikzpicture}
\newlength{\imagewidth}
\newlength{\imagescale}

\newcommand{\bomega}{\ensuremath{\mathbf{\Omega}}}
\newcommand{\tinydot}{\mbox{\tiny{\textbullet}}}
\newcommand{\keff}{\ensuremath{k_{\mathrm{eff}}}}
\newcommand{\bx}{\ensuremath{\mathbf{x}}}
\newcommand{\bz}{\ensuremath{\mathbf{z}}}
\newcommand{\bn}{\ensuremath{\mathbf{n}}}
\renewcommand{\d}[1]{\ensuremath{\mathrm{d}#1\,}}
\newcommand{\dom}{\ensuremath{\Omega}}
\newcommand{\bnd}{\ensuremath{\partial\dom}}
\newcommand{\pd}[3][]{\ensuremath{\frac{\partial^{#1}#2}{\partial #3^{#1}}}}
\newcommand{\T}{\ensuremath{\mathcal{T}}}
\newcommand{\V}{\ensuremath{\mathcal{V}}}
\newcommand{\face}[1][]{\ensuremath{\Gamma\ifthenelse{\equal{#1}{}}{}{_{\mathrm{#1}}}}}
\newcommand{\on}[1]{\ensuremath{\ \mbox{on } \face[#1]}}
\newcommand{\abs}[1]{\ensuremath{\left\vert#1\right\vert}}
\newcommand{\Ra}{\ensuremath{\structure{\Rightarrow}}}

\newcommand{\ra}{\ensuremath{\!\rightarrow\!}}
\newcommand{\intv}[2][\d{\br}]{\ensuremath{\iiint_{\V_i}{#2}\,{#1}}}
\newcommand{\xint}[3]{\int_{#1}^{#2}{#3}\,\d{x}}

\newcommand{\Dnl}{\ensuremath{\widetilde{D}_{n\mid r}}}
\newcommand{\nod}[1][]{\ensuremath{^{\ifthenelse{\equal{#1}{}}{}{#1,}\mathrm{NOD}}}}
\newcommand{\cmfd}[1][]{\ensuremath{^{\ifthenelse{\equal{#1}{}}{}{#1,}\mathrm{CMFD}}}}

\newcommand{\fl}{\ensuremath{\phi}}
\newcommand{\afl}{\ensuremath{\psi}}
\newcommand{\flfl}{\ensuremath{\pmb{\phi}}}
\newcommand{\DD}{\ensuremath{\mathbf{D}_{\mathrm{kor}}}}
\newcommand{\MM}{\ensuremath{\mathbf{M}}}
\newcommand{\FF}{\ensuremath{\mathbf{F}}}
\newcommand{\QQ}{\ensuremath{\mathbf{Q}}}
\newcommand{\VV}{\ensuremath{\mathbb{V}}}
\newcommand{\vv}{\ensuremath{\mathbf{v}}}


\newcommand{\rf}{\ensuremath{\mathrm{ref}}}

\renewcommand{\aa}[1]{\ensuremath{a^{#1}}}
\newcommand{\bb}[2]{\ensuremath{b^{#1#2}}}
\renewcommand{\ll}[1]{\ensuremath{l^{#1}}}
\renewcommand{\a}[3][]{\ensuremath{\ifthenelse{\equal{#1}{}}{a^{#2}(\fl^{#2},v^{#3})}{a^{#2}(\ltb{\fl^{#2}},\ltr{v^{#3}})}}}
\renewcommand{\b}[3][]{\ensuremath{\ifthenelse{\equal{#1}{}}{b^{#2#3}(\fl^{#3},v^{#2})}{b^{#2#3}(\ltb{\fl^{#3}},\ltr{v^{#2}})}}}
\renewcommand{\l}[1][]{\ensuremath{l^#1(v^{#1})}}
\newcommand{\A}{\ensuremath{\mathcal{A}}}
\renewcommand{\L}{\ensuremath{\ell}}
\newcommand{\enorm}[1]{\ensuremath{\lvert\lvert\lvert#1\rvert\rvert\rvert}}
\newcommand{\norm}[2][]{\ensuremath{\lvert\lvert#2\rvert\rvert_{#1}}}


\newcommand{\RR}[1][]{\ensuremath{\mathbb{R}^{#1}}}
\newcommand{\HH}[1][]{\ensuremath{H_{#1}^1(\dom)}}
\newcommand{\Linf}{\ensuremath{L^\infty(\dom)}}
\newcommand{\Ltwo}{\ensuremath{L^2(\dom)}}


\newcommand{\suma}{\sum_{\makebox[0pt]{${\scriptscriptstyle{g'\neq g}}$}}}
\newcommand{\io}[1]{\ensuremath{
	\structure{\stackrel{\mathrm{\tiny #1}}{\dashrightarrow}}}}
	
\newcommand{\dkg}[2][]{\bgroup\color#1{dkgreen}#2\egroup}
\newcommand{\dkb}[2][]{\bgroup\color#1{dkblue}#2\egroup}
\newcommand{\dkr}[2][]{\bgroup\color#1{dkred}#2\egroup}
\newcommand{\ltg}[2][]{\bgroup\color#1{green}#2\egroup}
\newcommand{\ltb}[2][]{\bgroup\color#1{blue}#2\egroup}
\newcommand{\ltr}[2][]{\bgroup\color#1{red}#2\egroup}
\newcommand{\gray}[2][]{\bgroup\color#1{black!60}#2\egroup}
\newcommand{\graysmall}[2][]{\bgroup\small\color#1{black!60}#2\egroup}


\newcommand{\mtx}[1]{\bigl[#1\bigr]}
\newcommand{\vct}[1]{\bigl\{#1\bigr\}}

\begin{document}

\input{%s}

\end{document}
"""
	sys.stderr.write("INFO: '%s' did not exist, saving default template - please configure!\n" % templateFilename)
	file(templateFilename, "w").write(template)

file(texName, "w").write(template % tikzName)

def verboseUnlink(filename):
	# FIXME: check mtime
	if options.verbose:
		print "cleaning up %r..." % filename
	try:
		os.unlink(filename)
	except OSError, e:
		if e.errno != 2:
			raise e

viewer = None

previous = 0
while True:
	try:
		mtime = os.path.getmtime(tikzName)
		if mtime > previous:
			out = None
			print "tikz2pdf: calling pdflatex..."
			if not options.verbose:
				out = tempfile.TemporaryFile()
			ec = subprocess.call(
				["pdflatex", "-halt-on-error", texName], stdout = out)
			if ec:
				if out:
					out.seek(0)
					sys.stdout.write(out.read())
				print "tikz2pdf: ERROR generating %r with pdflatex." % pdfName
			else:
				print "tikz2pdf: Successfully generated %r." % pdfName
				if options.view and viewer is None:
					print "tikz2pdf: starting viewer..."
					viewer = subprocess.Popen(viewCommand % pdfName, shell = True)
			if out:
				out.close()

			previous = mtime
			if options.once:
				break
		time.sleep(1)
	except KeyboardInterrupt:
		verboseUnlink(pdfName)
		break

verboseUnlink(texName)
for temp in glob.glob("tikz2pdf_temp.*"):
	if temp != pdfName:
		verboseUnlink(temp)
# for ext in (".aux", ".log"):
# 	verboseUnlink(basename + ext)
